# docker-compose.yml

services:
  redis-service:
    image: "redis:latest"
#    ports:
#      - "6379:6379"  # exposes service PUBLICLY, only for dev
    networks:
      - backend-network
    volumes:
      - "redis-volume:/data"
  web-service:
    build: ./web
    ports:
      - "80:8000"
    environment:
      REDIS_URL: "redis://redis-service:6379"
    networks:
      - backend-network
    depends_on:
      - redis-service
    # This command takes precedence over Dockerfile’s default CMD 
    # To show difference it runs server on port 8000 instead of 5000
    command: "gunicorn page_tracker.app:app --bind 0.0.0.0:8000"
  test-service:
    # assigns services to custom profiles that activates on demand.
    profiles:
      - testing # docker compose --profile testing up -d
    build:
      context: ./web
      dockerfile: Dockerfile.dev # provided explicitly as filename is non-standard
    # Note that Docker Compose service names uses as host names
    environment: 
      REDIS_URL: "redis://redis-service:6379"
      FLASK_URL: "http://web-service:8000"
    networks:
      - backend-network
    depends_on: # ensures that Redis and Flask start before the E2E test
      - redis-service
      - web-service
    # YAML’s multiline literal folding >
    command: > 
      sh -c 'python -m pytest test/e2e/ -vv \
        --redis-url $$REDIS_URL \
        --flask-url $$FLASK_URL'
    # $$ uses to avoid useing vars prematurely

networks:
    backend-network:

volumes:
  redis-volume: